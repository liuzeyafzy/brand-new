1、同步异步的区别  
  同步，就是发出一个功能调用时，在没有得到结果之前，该调用就不返回或继续执行后续操作。
  异步，与同步相对，就是当一个异步过程调用发出后，调用者在没有得到结果之前，就可以继续执行后续操作。
  总结来说，同步和异步的区别：请求发出后，是否需要等待结果，才能继续执行其他操作。

  JavaScript是单线程的。
  所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。
  同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；
  异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。

2、jQuery 异步和同步请求
   在jQuery Ajax里面有一个async 参数 , 默认值 为true , 请求为异步请求 , false 为同步请求 .

   alert("setp 1");  
  $.ajax({  
        url: "admin.php",  
        async: true, //false 
        success: function(data){  
            alert("异步请求"); // 1 
        }  
  });  
  alert("setp 2"); //2  

3、原生的XMLHttpRequest又是如何配置同步和异步请求的。
  通过XMLHttpRequest生成的请求可以有两种方式来获取数据，异步模式或同步模式。
  请求的类型是由这个XMLHttpRequest对象的open()方法的第三个参数async的值决定的。如果该参数的值为false，则该XMLHttpRequest请求以同步模式进行，否则该过程将以异步模式完成。

4、axios插件是如何配置同步和异步请求的。
  Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。
  axios插件目前没有同步请求，还是依靠JQ里的async配置同步信息
5、Promise语法学习，他的出现解决了异步的什么问题？
  所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。
  从语法上说，Promise是一个对象，从它可以获取异步操作的消息。
  Promise对象有以下两个特点。
 （1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。
 （2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。
  var promise = new Promise(function(resolve, reject) {
    // 进行异步操作
    if (/* 异步操作成功 */){
      resolve(value);  // 调用 resolve，将异步操作返回的 value，作为参数传递出去
    } else {
      reject(error);  // 调用 reject，将异步操作返回的 error，作为参数传递出去
    }
  });

  可以使多个进程能有序执行，而不是异步同时执行
6、用promise
  var p1 = new Promise(function (resolve, reject) {
    ajaxA
    if (success) {
      resolve()
    } else {
      reject()
    }
  }).catch(function (){
    ajaxD
  })
  var p2 = new Promise(function (resolve, reject) {
    ajaxB
    if (success) {
      resolve()
    } else {
      reject()
    }
  }).catch(function (){
    ajaxE
  })
  Promise.all([p1,p2]).then(function(data){
    ajaxC
  })
  不用promise,用回调函数
  function a(callbackFunction){
    ajaxA
    return callbackFunction(value);
  }
  function d(value){
    if(!value){
      ajaxD
    }
    return val;
  }
  function b(callbackFunction){
    ajaxB
    return callbackFunction(value);
  }
  function e(value){
    if(!value){
      ajaxE
    }
    return val;
  }
  function(){
    var result = a(d) && b(c)
    if(result) {
      ajaxC
    }
  }

7、async，一个异步执行的功能，而 await 则是配合 async 使用的另一个关键字，意思就是等待
  首先，从别人那得来的 async/await 规则：
  async 表示这是一个 async 函数，而 await 只能在这个函数里面使用。
  await 表示在这里等待 await 后面的操作执行完毕，再执行下一句代码。
  await 后面紧跟着的最好是一个耗时的操作或者是一个异步操作(当然非耗时的操作也可以的，但是就失去意义了)。

  let howLongToSleep = async function () {
    // 在这里使用起来就像同步代码那样直观
    console.log('start');
    await sleep(3000);  //sleep 为一个执行需要耗费 3s 的函数
    console.timeEnd('end');
 };

